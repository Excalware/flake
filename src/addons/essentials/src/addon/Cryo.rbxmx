<roblox xmlns:xmime="http://www.w3.org/2005/05/xmlmime" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="http://www.roblox.com/roblox.xsd" version="4">
	<Meta name="ExplicitAutoJoints">true</Meta>
	<External>null</External>
	<External>nil</External>
	<Item class="ModuleScript" referent="RBXE3A33344689149E984801BAF0703734C">
		<Properties>
			<BinaryString name="AttributesSerialize"></BinaryString>
			<Content name="LinkedSource"><null></null></Content>
			<string name="Name">Cryo</string>
			<string name="ScriptGuid">{0835BE44-F0B2-47C9-8CF5-1BD32CF1C4E5}</string>
			<ProtectedString name="Source"><![CDATA[return {
	Dictionary = require(script.Dictionary),
	List = require(script.List),
	isEmpty = require(script.isEmpty),
	None = require(script.None),
}]]></ProtectedString>
			<BinaryString name="Tags"></BinaryString>
		</Properties>
		<Item class="ModuleScript" referent="RBXFB5AB48A6ABB496594BDE8B5AD8E18DA">
			<Properties>
				<BinaryString name="AttributesSerialize"></BinaryString>
				<Content name="LinkedSource"><null></null></Content>
				<string name="Name">None</string>
				<string name="ScriptGuid">{8A10F11C-88BE-499A-A1DF-B52821E6B513}</string>
				<ProtectedString name="Source"><![CDATA[--[[
	Represents a value that is intentionally present, but should be interpreted
	as `nil`.

	Cryo.None is used by included utilities to make removing values more
	ergonomic.
]]

local None = newproxy(true)

getmetatable(None).__tostring = function()
	return "Cryo.None"
end

return None]]></ProtectedString>
				<BinaryString name="Tags"></BinaryString>
			</Properties>
		</Item>
		<Item class="ModuleScript" referent="RBX266B84992F724A008F23FD62B73B698B">
			<Properties>
				<BinaryString name="AttributesSerialize"></BinaryString>
				<Content name="LinkedSource"><null></null></Content>
				<string name="Name">isEmpty</string>
				<string name="ScriptGuid">{74BB1EF1-A3F5-4CCE-A82F-AF67B32DB9B8}</string>
				<ProtectedString name="Source"><![CDATA[local function isEmpty(object)
	return next(object) == nil
end

return isEmpty]]></ProtectedString>
				<BinaryString name="Tags"></BinaryString>
			</Properties>
		</Item>
		<Item class="ModuleScript" referent="RBX4F4ED31F11834AD19B1C5502DBBA2AE3">
			<Properties>
				<BinaryString name="AttributesSerialize"></BinaryString>
				<Content name="LinkedSource"><null></null></Content>
				<string name="Name">List</string>
				<string name="ScriptGuid">{C53F4FA7-C30F-4EC8-A3C9-3C60019E454A}</string>
				<ProtectedString name="Source"><![CDATA[--[[
	Defines utilities for working with 'list-like' tables.
]]

return {
	filter = require(script.filter),
	filterMap = require(script.filterMap),
	find = require(script.find),
	findWhere = require(script.findWhere),
	foldLeft = require(script.foldLeft),
	foldRight = require(script.foldRight),
	getRange = require(script.getRange),
	join = require(script.join),
	map = require(script.map),
	removeIndex = require(script.removeIndex),
	removeRange = require(script.removeRange),
	removeValue = require(script.removeValue),
	replaceIndex = require(script.replaceIndex),
	reverse = require(script.reverse),
	sort = require(script.sort),
	toSet = require(script.toSet),
}]]></ProtectedString>
				<BinaryString name="Tags"></BinaryString>
			</Properties>
			<Item class="ModuleScript" referent="RBX2FD405028A74417F918F58699E19AA13">
				<Properties>
					<BinaryString name="AttributesSerialize"></BinaryString>
					<Content name="LinkedSource"><null></null></Content>
					<string name="Name">reverse</string>
					<string name="ScriptGuid">{C80D705F-0DD7-465A-B1DF-FB62162DFBDB}</string>
					<ProtectedString name="Source"><![CDATA[--[[
	Returns a new list with the reversed order of the given list
]]

local function reverse(list)
	local new = {}
	local len = #list
	local top = len + 1

	for i = 1, len do
		new[i] = list[top - i]
	end

	return new
end

return reverse]]></ProtectedString>
					<BinaryString name="Tags"></BinaryString>
				</Properties>
			</Item>
			<Item class="ModuleScript" referent="RBXAB5575E93E2546CFAEF9DE593FEC0507">
				<Properties>
					<BinaryString name="AttributesSerialize"></BinaryString>
					<Content name="LinkedSource"><null></null></Content>
					<string name="Name">replaceIndex</string>
					<string name="ScriptGuid">{57C44073-C33E-4BC8-BDF0-9DB59E413BEA}</string>
					<ProtectedString name="Source"><![CDATA[--[[
	Returns a new list with the new value replaced at the given index.
]]

local function replaceIndex(list, index, value)
	local new = {}
	local len = #list

	assert(index <= len, "index must be less or equal than the list length")

	for i = 1, len do
		if i == index then
			new[i] = value
		else
			new[i] = list[i]
		end
	end

	return new
end

return replaceIndex]]></ProtectedString>
					<BinaryString name="Tags"></BinaryString>
				</Properties>
			</Item>
			<Item class="ModuleScript" referent="RBX9BA9B91A513E4785B8CE22D39B02CBAD">
				<Properties>
					<BinaryString name="AttributesSerialize"></BinaryString>
					<Content name="LinkedSource"><null></null></Content>
					<string name="Name">foldRight</string>
					<string name="ScriptGuid">{91861A20-6A89-4989-ADCB-0D151A3F2EA5}</string>
					<ProtectedString name="Source"><![CDATA[--[[
	Performs a right-fold of the list with the given initial value and callback.
]]
local function foldRight(list, callback, initialValue)
	local accum = initialValue

	for i = #list, 1, -1 do
		accum = callback(accum, list[i], i)
	end

	return accum
end

return foldRight]]></ProtectedString>
					<BinaryString name="Tags"></BinaryString>
				</Properties>
			</Item>
			<Item class="ModuleScript" referent="RBX0DB8E0DF05CE48E687602954D18021CF">
				<Properties>
					<BinaryString name="AttributesSerialize"></BinaryString>
					<Content name="LinkedSource"><null></null></Content>
					<string name="Name">removeValue</string>
					<string name="ScriptGuid">{858C89A2-F3FC-48DE-B4A4-8BCE4298CC28}</string>
					<ProtectedString name="Source"><![CDATA[--[[
	Creates a new list that has no occurrences of the given value.
]]
local function removeValue(list, value)
	local new = {}
	local index = 1

	for i = 1, #list do
		if list[i] ~= value then
			new[index] = list[i]
			index = index + 1
		end
	end

	return new
end

return removeValue]]></ProtectedString>
					<BinaryString name="Tags"></BinaryString>
				</Properties>
			</Item>
			<Item class="ModuleScript" referent="RBXEA2B2D8BE3464CCB915D8258FFE1B57D">
				<Properties>
					<BinaryString name="AttributesSerialize"></BinaryString>
					<Content name="LinkedSource"><null></null></Content>
					<string name="Name">removeRange</string>
					<string name="ScriptGuid">{C363F2E2-083A-4FDF-923F-F47124A5DD65}</string>
					<ProtectedString name="Source"><![CDATA[--[[
	Remove the range from the list starting from the index.
]]
local function removeRange(list, startIndex, endIndex)
	assert(startIndex <= endIndex, "startIndex must be less than or equal to endIndex")

	local new = {}
	local index = 1

	for i = 1, math.min(#list, startIndex - 1) do
		new[index] = list[i]
		index = index + 1
	end

	for i = endIndex + 1, #list do
		new[index] = list[i]
		index = index + 1
	end

	return new
end

return removeRange]]></ProtectedString>
					<BinaryString name="Tags"></BinaryString>
				</Properties>
			</Item>
			<Item class="ModuleScript" referent="RBX97F93CCA0AC644ACB074669030D71ABA">
				<Properties>
					<BinaryString name="AttributesSerialize"></BinaryString>
					<Content name="LinkedSource"><null></null></Content>
					<string name="Name">toSet</string>
					<string name="ScriptGuid">{448FF3CF-FAAA-44B9-8583-562E2760F0F2}</string>
					<ProtectedString name="Source"><![CDATA[--[[
	Create a dictionary where each value in the given list corresponds to a key
	in the dictionary with a value of true
]]

local function toSet(list)
	local new = {}

	for i = 1, #list do
		new[list[i]] = true
	end

	return new
end

return toSet]]></ProtectedString>
					
					<BinaryString name="Tags"></BinaryString>
				</Properties>
			</Item>
			<Item class="ModuleScript" referent="RBXA7AAD59BDD9D45A9977DFC31206F855D">
				<Properties>
					<BinaryString name="AttributesSerialize"></BinaryString>
					<Content name="LinkedSource"><null></null></Content>
					<string name="Name">foldLeft</string>
					<string name="ScriptGuid">{4F3F99E6-AF80-4E77-BE0F-D2E3DECECD60}</string>
					<ProtectedString name="Source"><![CDATA[--[[
	Performs a left-fold of the list with the given initial value and callback.
]]
local function foldLeft(list, callback, initialValue)
	local accum = initialValue

	for i = 1, #list do
		accum = callback(accum, list[i], i)
	end

	return accum
end

return foldLeft]]></ProtectedString>
					
					<BinaryString name="Tags"></BinaryString>
				</Properties>
			</Item>
			<Item class="ModuleScript" referent="RBX69A9559586D848C182A364DE2DA965E7">
				<Properties>
					<BinaryString name="AttributesSerialize"></BinaryString>
					<Content name="LinkedSource"><null></null></Content>
					<string name="Name">getRange</string>
					<string name="ScriptGuid">{C87AC9C2-A290-4498-85B6-E597C988607D}</string>
					<ProtectedString name="Source"><![CDATA[--[[
	Returns a new list containing only the elements within the given range.
]]

local function getRange(list, startIndex, endIndex)
	assert(startIndex <= endIndex, "startIndex must be less than or equal to endIndex")

	local new = {}
	local index = 1

	for i = math.max(1, startIndex), math.min(#list, endIndex) do
		new[index] = list[i]
		index = index + 1
	end

	return new
end

return getRange]]></ProtectedString>
					
					<BinaryString name="Tags"></BinaryString>
				</Properties>
			</Item>
			<Item class="ModuleScript" referent="RBX19536D93DD814A019A2F7CE883F9267C">
				<Properties>
					<BinaryString name="AttributesSerialize"></BinaryString>
					<Content name="LinkedSource"><null></null></Content>
					<string name="Name">map</string>
					<string name="ScriptGuid">{DEAE0DED-EBE2-402A-BAE5-23C4AEEF7277}</string>
					<ProtectedString name="Source"><![CDATA[--[[
	Create a copy of a list where each value is transformed by `callback`
]]
local function map(list, callback)
	local new = {}

	for i = 1, #list do
		new[i] = callback(list[i], i)
	end

	return new
end

return map]]></ProtectedString>
					
					<BinaryString name="Tags"></BinaryString>
				</Properties>
			</Item>
			<Item class="ModuleScript" referent="RBX4F771A19CE134A74ABA737A4A3920AFD">
				<Properties>
					<BinaryString name="AttributesSerialize"></BinaryString>
					<Content name="LinkedSource"><null></null></Content>
					<string name="Name">findWhere</string>
					<string name="ScriptGuid">{7E9FA1B0-117E-4676-953B-ECFD0F4D1130}</string>
					<ProtectedString name="Source"><![CDATA[--[[
	Returns the index of the first value for which predicate(value, index) is truthy, or nil if not found.
]]

local function findWhere(list, predicate)
	for i = 1, #list do
		if predicate(list[i], i) then
			return i
		end
	end
	return nil
end

return findWhere]]></ProtectedString>
					
					<BinaryString name="Tags"></BinaryString>
				</Properties>
			</Item>
			<Item class="ModuleScript" referent="RBXB2B511653A354F2FB03CB12618C7F5BA">
				<Properties>
					<BinaryString name="AttributesSerialize"></BinaryString>
					<Content name="LinkedSource"><null></null></Content>
					<string name="Name">sort</string>
					<string name="ScriptGuid">{672F649A-91C5-4546-88A4-D10B434E6694}</string>
					<ProtectedString name="Source"><![CDATA[--[[
	Returns a new list, ordered with the given sort callback.
	If no callback is given, the default table.sort will be used.
]]

local function sort(list, callback)
	local new = {}

	for i = 1, #list do
		new[i] = list[i]
	end

	table.sort(new, callback)

	return new
end

return sort]]></ProtectedString>
					
					<BinaryString name="Tags"></BinaryString>
				</Properties>
			</Item>
			<Item class="ModuleScript" referent="RBX5B3B817447834C709EE271181E293D69">
				<Properties>
					<BinaryString name="AttributesSerialize"></BinaryString>
					<Content name="LinkedSource"><null></null></Content>
					<string name="Name">join</string>
					<string name="ScriptGuid">{7A6D2960-0104-478E-9945-BC25F658EE3F}</string>
					<ProtectedString name="Source"><![CDATA[local None = require(script.Parent.Parent.None)

--[[
	Joins any number of lists together into a new list
]]
local function join(...)
	local new = {}

	for listKey = 1, select("#", ...) do
		local list = select(listKey, ...)
		local len = #new

		for itemKey = 1, #list do
			if list[itemKey] == None then
				len = len - 1
			else
				new[len + itemKey] = list[itemKey]
			end
		end
	end

	return new
end

return join]]></ProtectedString>
					
					<BinaryString name="Tags"></BinaryString>
				</Properties>
			</Item>
			<Item class="ModuleScript" referent="RBXCFB893813270447FB0A3DBC98043AF13">
				<Properties>
					<BinaryString name="AttributesSerialize"></BinaryString>
					<Content name="LinkedSource"><null></null></Content>
					<string name="Name">filterMap</string>
					<string name="ScriptGuid">{AF55E751-716A-4C7D-8E08-28F76BF82003}</string>
					<ProtectedString name="Source"><![CDATA[--[[
	Create a copy of a list doing a combination filter and map.

	If callback returns nil for any item, it is considered filtered from the
	list. Any other value is considered the result of the 'map' operation.
]]
local function filterMap(list, callback)
	local new = {}
	local index = 1

	for i = 1, #list do
		local result = callback(list[i], i)

		if result ~= nil then
			new[index] = result
			index = index + 1
		end
	end

	return new
end

return filterMap]]></ProtectedString>
					
					<BinaryString name="Tags"></BinaryString>
				</Properties>
			</Item>
			<Item class="ModuleScript" referent="RBXB4B2C78F7F06402182B9FC93D0DFC2E9">
				<Properties>
					<BinaryString name="AttributesSerialize"></BinaryString>
					<Content name="LinkedSource"><null></null></Content>
					<string name="Name">find</string>
					<string name="ScriptGuid">{1AF79BE7-79CC-4348-9B86-862163C98119}</string>
					<ProtectedString name="Source"><![CDATA[--[[
	Returns the index of the first value found or nil if not found.
]]

local function find(list, value)
	for i = 1, #list do
		if list[i] == value then
			return i
		end
	end
	return nil
end

return find]]></ProtectedString>
					
					<BinaryString name="Tags"></BinaryString>
				</Properties>
			</Item>
			<Item class="ModuleScript" referent="RBX6EDB883AD4DB4327B4668B372B37E888">
				<Properties>
					<BinaryString name="AttributesSerialize"></BinaryString>
					<Content name="LinkedSource"><null></null></Content>
					<string name="Name">filter</string>
					<string name="ScriptGuid">{215C8CB1-922D-4546-BC78-27B61AB4EF4A}</string>
					<ProtectedString name="Source"><![CDATA[--[[
	Create a copy of a list with only values for which `callback` returns true.
	Calls the callback with (value, index).
]]
local function filter(list, callback)
	local new = {}
	local index = 1

	for i = 1, #list do
		local value = list[i]
		if callback(value, i) then
			new[index] = value
			index = index + 1
		end
	end

	return new
end

return filter]]></ProtectedString>
					
					<BinaryString name="Tags"></BinaryString>
				</Properties>
			</Item>
			<Item class="ModuleScript" referent="RBXC3C6373D046E41D3AFE7BBF429481A30">
				<Properties>
					<BinaryString name="AttributesSerialize"></BinaryString>
					<Content name="LinkedSource"><null></null></Content>
					<string name="Name">removeIndex</string>
					<string name="ScriptGuid">{57CCA30E-DB90-45F3-8012-E2136E7810B4}</string>
					<ProtectedString name="Source"><![CDATA[--[[
	Remove the element at the given index.
]]
local function removeIndex(list, index)
	local new = {}
	local removed = 0

	for i = 1, #list do
		if i == index then
			removed = 1
		else
			new[i - removed] = list[i]
		end
	end

	return new
end

return removeIndex]]></ProtectedString>
					
					<BinaryString name="Tags"></BinaryString>
				</Properties>
			</Item>
		</Item>
		<Item class="ModuleScript" referent="RBXE699BBD5A9E244CE8BE18DD72C34EA2D">
			<Properties>
				<BinaryString name="AttributesSerialize"></BinaryString>
				<Content name="LinkedSource"><null></null></Content>
				<string name="Name">Dictionary</string>
				<string name="ScriptGuid">{C594AF86-7CE1-4017-973D-59C2E6032406}</string>
				<ProtectedString name="Source"><![CDATA[--[[
	Defines utilities for working with 'dictionary-like' tables.

	Dictionaries can be indexed by any value, but don't have the ordering
	expectations that lists have.
]]

return {
	join = require(script.join),
	keys = require(script.keys),
	values = require(script.values),
}]]></ProtectedString>
				
				<BinaryString name="Tags"></BinaryString>
			</Properties>
			<Item class="ModuleScript" referent="RBXB5F30E407E344368BE9D0531E72D4F93">
				<Properties>
					<BinaryString name="AttributesSerialize"></BinaryString>
					<Content name="LinkedSource"><null></null></Content>
					<string name="Name">values</string>
					<string name="ScriptGuid">{405C512F-1FCA-44A4-8484-6ECE0A1B4209}</string>
					<ProtectedString name="Source"><![CDATA[--[[
	Returns a list of the values of the given dictionary.
]]

local function values(dictionary)
	local new = {}
	local index = 1

	for _, value in pairs(dictionary) do
		new[index] = value
		index = index + 1
	end

	return new
end

return values]]></ProtectedString>
					
					<BinaryString name="Tags"></BinaryString>
				</Properties>
			</Item>
			<Item class="ModuleScript" referent="RBX0AF1FE899DDB45C19F2DF72769A6E8B1">
				<Properties>
					<BinaryString name="AttributesSerialize"></BinaryString>
					<Content name="LinkedSource"><null></null></Content>
					<string name="Name">keys</string>
					<string name="ScriptGuid">{A29EA4A0-A87C-4598-99DA-FB814978853D}</string>
					<ProtectedString name="Source"><![CDATA[--[[
	Returns a list of the keys from the given dictionary.
]]
local function keys(dictionary)
	local new = {}
	local index = 1

	for key in pairs(dictionary) do
		new[index] = key
		index = index + 1
	end

	return new
end

return keys]]></ProtectedString>
					
					<BinaryString name="Tags"></BinaryString>
				</Properties>
			</Item>
			<Item class="ModuleScript" referent="RBXFD8D488E2DED4AC6BB2C67755666A233">
				<Properties>
					<BinaryString name="AttributesSerialize"></BinaryString>
					<Content name="LinkedSource"><null></null></Content>
					<string name="Name">join</string>
					<string name="ScriptGuid">{6FF14FB6-41B1-4741-924F-0E004333095B}</string>
					<ProtectedString name="Source"><![CDATA[local None = require(script.Parent.Parent.None)

--[[
	Combine a number of dictionary-like tables into a new table.

	Keys specified in later tables will overwrite keys in previous tables.

	Use `Cryo.None` as a value to remove a key. This is necessary because
	Lua does not distinguish between a value not being present in a table and a
	value being `nil`.
]]
local function join(...)
	local new = {}

	for i = 1, select("#", ...) do
		local source = select(i, ...)

		for key, value in pairs(source) do
			if value == None then
				new[key] = nil
			else
				new[key] = value
			end
		end
	end

	return new
end

return join]]></ProtectedString>
					
					<BinaryString name="Tags"></BinaryString>
				</Properties>
			</Item>
		</Item>
	</Item>
</roblox>